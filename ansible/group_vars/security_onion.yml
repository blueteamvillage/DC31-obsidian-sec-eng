---


# Security Onion variables - Installation Script
security_onion_fqdn: "securityonion.{{ external_domain }}"
# Note that password will be passed to shell variables so quotes and few other special characters may
# create issue
securityonion_adminuser: "onionroot"
securityonion_adminuser_password: "{{ lookup('amazon.aws.aws_secret', 'DEFCON_2023_OBSIDIAN-securityonion-admin-pass', region=aws_region) }}"
securityonion_hostname: 'securityonion'
securityonion_soremote_password: "{{ lookup('amazon.aws.aws_secret', 'DEFCON_2023_OBSIDIAN-securityonion-soremote-pass', region=aws_region) }}"
securityonion_webuser_email: "so-superuser@{{ external_domain }}"
securityonion_webuser_password: "{{ lookup('amazon.aws.aws_secret', 'DEFCON_2023_OBSIDIAN-securityonion-webuser-pass', region=aws_region) }}"

# Security Onion interfaces
# use `ansible -m setup <server>` to ensure you pick the right ones
# securityonion_management_nic: '{{ (ansible_interfaces | sort)[0] }}'
securityonion_management_nic: "{{ ansible_default_ipv4.interface }}"
# securityonion_bonding_nic: '{{ (ansible_interfaces | sort)[1] }}'
securityonion_bonding_nic: 'ens6'

# Security Onion - pinned version
# Security Onion 2.3.230-20230417
securityonion_version: 3891548d6d66ced10779ff9138e946a287fe51b2

# pre load docker images
securityonion_docker_images_version: 2.3.220
securityonion_docker_images:
  - ghcr.io/security-onion-solutions/so-soc
  - ghcr.io/security-onion-solutions/so-strelka-backend
  - ghcr.io/security-onion-solutions/so-mysql
  - ghcr.io/security-onion-solutions/so-zeek
  - ghcr.io/security-onion-solutions/so-nginx
  - ghcr.io/security-onion-solutions/so-suricata
  - ghcr.io/security-onion-solutions/so-strelka-filestream
  - ghcr.io/security-onion-solutions/so-kibana
  - ghcr.io/security-onion-solutions/so-kratos
  - ghcr.io/security-onion-solutions/so-wazuh
  - ghcr.io/security-onion-solutions/so-idstools
  - ghcr.io/security-onion-solutions/so-elasticsearch
  - ghcr.io/security-onion-solutions/so-soctopus
  - ghcr.io/security-onion-solutions/so-logstash
  - ghcr.io/security-onion-solutions/so-filebeat
  - ghcr.io/security-onion-solutions/so-strelka-manager
  - ghcr.io/security-onion-solutions/so-steno
  - ghcr.io/security-onion-solutions/so-telegraf
  - ghcr.io/security-onion-solutions/so-fleet
  - ghcr.io/security-onion-solutions/so-grafana
  - ghcr.io/security-onion-solutions/so-fleet-launcher
  - ghcr.io/security-onion-solutions/so-strelka-frontend
  - ghcr.io/security-onion-solutions/so-pcaptools
  - ghcr.io/security-onion-solutions/so-curator
  - ghcr.io/security-onion-solutions/so-idh
  - ghcr.io/security-onion-solutions/so-playbook
  - ghcr.io/security-onion-solutions/so-elastalert
  - ghcr.io/security-onion-solutions/so-influxdb
  - ghcr.io/security-onion-solutions/so-acng
  - ghcr.io/security-onion-solutions/so-redis
  # - ghcr.io/security-onion-solutions/registry

# geerlingguy.docker with version aligned to securityonion
docker_packages:
  - docker-ce=5:20.10.8~3-0~ubuntu-focal
  - docker-ce-cli=5:20.10.8~3-0~ubuntu-focal
  - docker-ce-rootless-extras=5:20.10.8~3-0~ubuntu-focal
  - "containerd.io"

# mdsketch.teleport
teleport_config_template: teleport-securityonion.yaml.j2

# or auto retrieve from amazon.aws.ec2_tag_info?
teleport_ssh_labels:
  - { k: 'hostname', v: "{{ ansible_hostname }}" }
  - { k: 'aws/Name', v: 'DEFCON_2023_OBSIDIAN_securityonion_server' }
  - { k: 'aws/Project', v: 'DEFCON_2023_OBSIDIAN' }

# juju4.arkime
# 4.3.0-1 has a librdkafka dependency bug on 22.04, pending release of 4.3.1-1
arkime_version: 4.2.0-1
arkime_admin_user: arkime_admin
arkime_admin_pass: "{{ lookup('amazon.aws.aws_secret', 'DEFCON_2023_OBSIDIAN-arkime-admin-pass', region=aws_region) }}"
arkime_users:
  - { name: arkime_analyst,
      comment: "Analyst",
      pass: "{{ lookup('amazon.aws.aws_secret', 'DEFCON_2023_OBSIDIAN-arkime-analyst-pass', region=aws_region) }}"
  }
arkime_elastic_host: localhost
arkime_elastic_port: 9400
arkime_capture_if: 'ens6'
arkime_passwordsecret: "{{ lookup('amazon.aws.aws_secret', 'DEFCON_2023_OBSIDIAN-arkime-secret', region=aws_region) }}"
# if got geoip Maxmind config
arkime_geoip_conf_file: 'GeoIP.conf'
# geerlingguy.elasticsearch (for arkime)
elasticsearch_version: '8.x'
elasticsearch_package: elasticsearch
elasticsearch_network_host:
  - localhost
elasticsearch_http_port: 9400
elasticsearch_extra_options: |
  discovery.type: single-node
  xpack.security.enabled: false
  xpack.security.transport.ssl.enabled: false
  xpack.security.http.ssl.enabled: false
elasticsearch_cert_ca_pass: "{{ lookup('amazon.aws.aws_secret', 'DEFCON_2023_OBSIDIAN-arkime-es-cert-pass', region=aws_region) }}"
elasticsearch_cert_pass: "{{ lookup('amazon.aws.aws_secret', 'DEFCON_2023_OBSIDIAN-arkime-es-cert-pass', region=aws_region) }}"
